apply plugin: 'maven-publish'
apply plugin: 'signing'

task sdkDocs(type: Javadoc) {
    group = "Documentation"
    description = "Generate Javadoc"
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    exclude '**/internal/*'
    classpath = project.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.addStringOption('Xmaxwarns', '1')
    options.addStringOption('Xmaxerrs', '1')
    options.links "http://developer.android.com/reference"
}

task javadocJar(type: Jar) {
    dependsOn sdkDocs
    from sdkDocs.destinationDir
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

def modulePublishName = "tfod"
group = "org.firstinspires.ftc"
archivesBaseName = modulePublishName
version = System.getenv("PUBLISH_VERSION")

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')

signing {
    sign publishing.publications
}

/*
 * https://developer.android.com/studio/build/maven-publish-plugin
 *
 * components.release automatically pulls the AAR for the library this
 * plugin is applied to.
 */

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact sourcesJar
                artifact javadocJar

                // The coordinates of the library, being set from variables that
                // we'll set up in a moment
                groupId 'org.firstinspires.ftc'
                artifactId modulePublishName
                version System.getenv("PUBLISH_VERSION")

                // Two artifacts, the `aar` and the sources
                // artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                // artifact androidSourcesJar

                // Self-explanatory metadata for the most part
                pom {
                    name = modulePublishName
                    description = 'FTC SDK'
                    // If your project has a dedicated site, use its URL here
                    url = 'https://github.com/FIRST-Tech-Challenge/FtcRobotController'
                    licenses {
                        license {
                            name = '3-Clause BSD'
                            url = 'https://opensource.org/licenses/BSD-3-Clause'
                        }
                    }
                    developers {
                        developer {
                            id = 'ftctechteam'
                            name = 'FTC Technology Team'
                            email = 'ftctechnh@firstinspires.org'
                            organization = 'FIRST Inspires'
                            organizationUrl = 'https://www.firstinspires.org'
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git:github.com/FIRST-Tech-Challenge/FtcRobotController.git'
                        developerConnection = 'scm:git:ssh://github.com/OpenFTC/Extracted-RC.git'
                        url = 'https://github.com/FIRST-Tech-Challenge/FtcRobotController/tree/master'
                    }
                }
            }
        }

        repositories {
            // The repository to publish to, Sonatype/MavenCentral
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = "ftcsdk"

                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                // You only need this if you want to publish snapshots, otherwise just set the URL
                // to the release repo directly
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                // The username and password we've fetched earlier
                credentials {
                    username System.getenv("OSSRH_USERNAME")
                    password System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }
}
